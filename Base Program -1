%{
EESC 6353 : Broadband Digital Communications
Instructor : Dr. Naofal Al-Dhahir
Project : Power Management algorithms for maximizing the utility of Energy Harvesting Sensors
Team Members : Johns George, Roshmi James & Naresh Balaji
%}
clc;
close all;

%{
pdf of the channel power gain - fg
CDF of the channel power gain - Fg
Coherence Time (aka Constant Channel [CC]) - Tc (of order of few milliseconds)
Constant power (CP) slot - Tp {Tp >> Tc} (15 min duration)
Harvested Power - Ph
pdf of the harvested power - fp
CDF of the harvested power - Fp
Battery efficiency - eta_b lies between [0,1]
Power consumed by sensing and control circuitry (fixed) - Pf
Energy spent for estimating channel - Em
Power spent for estimating channel - Pm {Pm = Em/Tc}
Fixed Data Rate - Ron, Normalized
Number of CC slots per CP slot - M = Tp/Tc
Fraction out of M CC slots used for transmission - alpha
Transmission in an alpha CC slot happens for duration - Tt
Duty cycle - D = Tt/Tc = 1 (Optimal)

Power consumed by transceiver - Po, required to achieve Ron when gamma = 1
Threshold channel gain - gamma_m
Channel gain - gamma
%}
tic

err= 'WRONG OPTION';

first=input('Are you running for first time ? \n 1. Yes \n 2. No \n');
if first~=1 && first~=2
    error(err);
end

if first==1
    % INNER STAGE
    % THE Ra, Pa AND Slope IS CALCULATED.
    clear all;
    display(' Gathering All Information . . .');
    t=timer;
    t.StartDelay=5;
    t.TimerFcn=@(~,~) disp(' . . .');
    start(t)
    
    [ Ra1 Pa slope slope_retx slope_wf ] = inner_stage;
    stop(t)
end



% OUTER STAGE P1 & P2
% VARYING TP TIME SLOTS FROM 1MIN-30MIN
P1_avg=zeros(1);
P2_avg=zeros(1);

Eb_TCI=zeros(1);
P1_TCI=zeros(1);
P2_TCI=zeros(1);
change_TCI=zeros(1);
batt_TCI=zeros(1);

Eb_retx=zeros(1);
P1_retx=zeros(1);
P2_retx=zeros(1);
change_retx=zeros(1);
batt_retx=zeros(1);


solar_dis=input('\n Please select the Solar Data Ditribution\n 1. Uniform Solar Ditribution\n 2. Exponential Solar Distribution\n 3. Gaussian Solar Distribution\n 4. Compare all\n');
if solar_dis==1
    distribution='Uniform Solar Distribution';
    dis=1;
elseif solar_dis==2
    distribution='Exponential Solar Distribution';
    dis=1;
elseif solar_dis==3
    distribution='Gaussian Solar Distribution';
    dis=1;
elseif solar_dis==4
    dis=3;
end

if solar_dis~=1 && solar_dis~=2 && solar_dis~=3 && solar_dis~=4
    error(err);
end


opt=input('\n Please select the scheme : \n 1. Truncated channel inversion\n 2. Retransmission\n 3. Water Filling\n 4. Compare all\n');
if opt~=1 && opt~=2 && opt~=3 && opt~=4
    error(err);
end

all_opt=input('\n Run for :\n 1. For All Tp\n 2. For One Tp\n');
if all_opt~=1 && all_opt~=2
    error(err);
end

if all_opt==1
    minutes=[1 2 5 10 15 30 60 120];
elseif all_opt==2
    min_opt=input('\n Select the Tp minutes :\n 1. 1min\n 2. 2min\n 3. 5min\n 4. 10min\n 5. 15min\n 6. 30min \n 7. 60min\n 8. 120min\n');
    if min_opt==1
        minutes=[1];
    elseif min_opt==2
        minutes=[2];
    elseif min_opt==3
        minutes=[5];
    elseif min_opt==4
        minutes=[10];
    elseif min_opt==5
        minutes=[15];
    elseif min_opt==6
        minutes=[30];
    elseif min_opt==7
        minutes=[60];
    elseif min_opt==8
        minutes=[120];
    end
end



if opt==1 || opt==4
    type='Truncated Channel Inversion Scheme';
    for distrib=1:1:dis
        if (distrib==1 && dis==3)
            distribution='Uniform Solar Distribution';
        elseif (distrib==2 && dis==3)
            distribution='Exponential Solar Distribution';
        elseif (distrib==3 && dis==3)
            distribution='Gaussian Solar Distribution';
        end
        for m=1:length(minutes)
            % CALCULATION OF P1 & P2
            if solar_dis==1 || (solar_dis==4 && distrib==1)
                [P1_avg P2_avg Eb_avg Px change batt_Eb] = P1P2_TCI_uni(Pa,slope,minutes(m));
                P1_TCI_uni(m)=P1_avg;
                P2_TCI_uni(m)=P2_avg;
            elseif solar_dis==2 || (solar_dis==4 && distrib==2)
                [P1_avg P2_avg Eb_avg Px change batt_Eb] = P1P2_TCI_exp(Pa,slope,minutes(m));
                P1_TCI_exp(m)=P1_avg;
                P2_TCI_exp(m)=P2_avg;
            elseif solar_dis==3 || (solar_dis==4 && distrib==3)
                [P1_avg P2_avg Eb_avg Px change batt_Eb] = P1P2_TCI_gaus(Pa,slope,minutes(m));
                P1_TCI_gaus(m)=P1_avg;
                P2_TCI_gaus(m)=P2_avg;
            end
            
            
            Eb_TCI(m)=Eb_avg;
            P1_TCI(m)=P1_avg;
            P2_TCI(m)=P2_avg;
            change_TCI(m)=change;
            batt_TCI(m)=batt_Eb;
            % CALCULATE THE Pa FOR HARVESTED PROFILE
            [ Pa_tp ] = Pwr_Pa_Tp(P1_avg,P2_avg,Px,type,distribution);
        end
        disp(' ');
        disp(distribution);
        disp('==========================');
        disp(' ');
        disp(type);
        disp('==================================')
        for m=1:length(minutes)
            u=[' Tp : ',num2str(minutes(m)),'min'];
            v=[' P1 : ',num2str(P1_TCI(m)),'mW',' P2 : ',num2str(P2_TCI(m)),'mW'];
            w=[' Eb-Avg : ',num2str(Eb_TCI(m)),'J',' Change : ',num2str(change_TCI(m)),'%',' BATTERY : ',num2str(batt_TCI(m)),'mAh'];
            disp(u);
            disp(v);
            disp(w);
            disp(' ');
        end
    end
    if solar_dis==4
        figure;
        plot( minutes,P1_TCI_uni,'mo-'); hold on;
        plot( minutes,P2_TCI_uni,'mo-'); hold on;
        plot( minutes,P1_TCI_exp,'r*-.'); hold on;
        plot( minutes,P2_TCI_exp,'r*-.'); hold on;
        plot( minutes,P1_TCI_gaus,'bx--'); hold on;
        plot( minutes,P2_TCI_gaus,'bx--'); hold off;2
        title('Truncated Channel Inversion');
        grid on;
        xlabel('Time(minutes)');
        ylabel('Power(mW)');
        legend('P1-TCI-Uniform','P2-TCI-Uniform','P1-TCI-Exponential','P2-TCI-Exponential','P1-TCI-Gaussian','P2-TCI-Gaussian');
    end
end


if opt==2 || opt==4
    type='Retransmission Scheme';
    for distri=1:1:dis
        if (distri==1 && dis==3)
            distribution='Uniform Solar Distribution';
        elseif (distri==2 && dis==3)
            distribution='Exponential Solar Distribution';
        elseif (distri==3 && dis==3)
            distribution='Gaussian Solar Distribution';
        end
        for m=1:length(minutes)
            % CALCULATION OF P1 & P2
            if solar_dis==1 || (solar_dis==4 && distri==1)
                [ P1_avg P2_avg Eb_avg Px change batt_Eb] = P1P2_retx_uni(Pa,slope_retx,minutes(m));
                P1_retx_uni(m)=P1_avg;
                P2_retx_uni(m)=P2_avg;
            elseif solar_dis==2 || (solar_dis==4 && distri==2)
                [ P1_avg P2_avg Eb_avg Px change batt_Eb] = P1P2_retx_exp(Pa,slope_retx,minutes(m));
                P1_retx_exp(m)=P1_avg;
                P2_retx_exp(m)=P2_avg;
            elseif solar_dis==3 || (solar_dis==4 && distri==3)
                [ P1_avg P2_avg Eb_avg Px change batt_Eb] = P1P2_retx_gaus(Pa,slope_retx,minutes(m));
                P1_retx_gaus(m)=P1_avg;
                P2_retx_gaus(m)=P2_avg;
            end
            
            Eb_retx(m)=Eb_avg;
            P1_retx(m)=P1_avg;
            P2_retx(m)=P2_avg;
            change_retx(m)=change;
            batt_retx(m)=batt_Eb;
            % CALCULATE THE Pa FOR HARVESTED PROFILE
            [ Pa_tp ] = Pwr_Pa_Tp(P1_avg,P2_avg,Px,type,distribution);
        end
        disp(' ');
        disp(distribution);
        disp('======================================');
        disp(' ');
        disp(type);
        disp('=====================')
        for m=1:length(minutes)
            x=[' Tp : ',num2str(minutes(m)),'min'];
            y=[' P1 : ',num2str(P1_retx(m)),'mW',' P2 : ',num2str(P2_retx(m)),'mW'];
            z=[' Eb-Avg : ',num2str(Eb_retx(m)),'J',' Change : ',num2str(change_retx(m)),'%',' BATTERY : ',num2str(batt_retx(m)),'mAh'];
            disp(x);
            disp(y);
            disp(z);
            disp(' ');
        end
    end
    
    if solar_dis==4
        figure;
        plot( minutes,P1_retx_uni,'mo-'); hold on;
        plot( minutes,P2_retx_uni,'mo-'); hold on;
        plot( minutes,P1_retx_exp,'r*-.'); hold on;
        plot( minutes,P2_retx_exp,'r*-.'); hold on;
        plot( minutes,P1_retx_gaus,'bx--'); hold on;
        plot( minutes,P2_retx_gaus,'bx--'); hold off;
        title('Retransmission');
        grid on;
        xlabel('Time(minutes)');
        ylabel('Power(mW)');
        legend('P1-retx-Uniform','P2-retx-Uniform','P1-retx-Exponential','P2-retx-Exponential','P1-retx-Gaussian','P2-retx-Gaussian');
    end
    
end


if opt==3 || opt==4
    type='Water Filling';
    for distri=1:1:dis
        if (distri==1 && dis==3)
            distribution='Uniform Solar Distribution';
        elseif (distri==2 && dis==3)
            distribution='Exponential Solar Distribution';
        elseif (distri==3 && dis==3)
            distribution='Gaussian Solar Distribution';
        end
        for m=1:length(minutes)
            
            % CALCULATION OF P1 & P2
            
            if solar_dis==1 || (solar_dis==4 && distri==1)
                [ P1_avg P2_avg Eb_avg Px change batt_Eb] = P1P2_wf(Pa,slope_wf,minutes(m));
                P1_wf_uni(m)=P1_avg;
                P2_wf_uni(m)=P2_avg;
            end
            if solar_dis==2 || (solar_dis==4 && distri==2)
                [ P1_avg P2_avg Eb_avg Px change batt_Eb] = P1P2_wf_exp(Pa,slope_wf,minutes(m));
                P1_wf_exp(m)=P1_avg;
                P2_wf_exp(m)=P2_avg;
            end
            if solar_dis==3 || (solar_dis==4 && distri==3)
                [ P1_avg P2_avg Eb_avg Px change batt_Eb] = P1P2_wf_gaus(Pa,slope_wf,minutes(m));
                P1_wf_gaus(m)=P1_avg;
                P2_wf_gaus(m)=P2_avg;
            end
            
            Eb_wf(m)=Eb_avg;
            batt_wf(m)=batt_Eb;
            P1_wf(m)=P1_avg;
            P2_wf(m)=P2_avg;
            change_wf(m)=change;
            
            
            % CALCULATE THE Pa FOR HARVESTED PROFILE
            [ Pa_tp ] = Pwr_Pa_Tp(P1_avg,P2_avg,Px,type,distribution);
        end
        disp(' ');
        disp(distribution);
        disp('==========================');
        disp(' ');
        disp(type);
        disp('==================================')
        for m=1:length(minutes)
            u=[' Tp : ',num2str(minutes(m)),'min'];
            v=[' P1 : ',num2str(P1_wf(m)),'mW',' P2 : ',num2str(P2_wf(m)),'mW'];
            w=[' Eb-Avg : ',num2str(Eb_wf(m)),'J',' Change : ',num2str(change_wf(m)),'%',' BATTERY : ',num2str(batt_wf(m)),'mAh'];
            disp(u);
            disp(v);
            disp(w);
            disp(' ');
        end
    end
    if solar_dis==4
        figure;
        plot( minutes,P1_wf_uni,'mo-'); hold on;
        plot( minutes,P2_wf_uni,'mo-'); hold on;
        plot( minutes,P1_wf_exp,'r*-.'); hold on;
        plot( minutes,P2_wf_exp,'r*-.'); hold on;
        plot( minutes,P1_wf_gaus,'bx--'); hold on;
        plot( minutes,P2_wf_gaus,'bx--'); hold off;
        title('Water Filling');
        grid on;
        xlabel('Time(minutes)');
        ylabel('Power(mW)');
        legend('P1-Uniform','P2-Uniform','P1-Exponential','P2-Exponential','P1-Gaussian','P2-G2aussian');
    end
end

toc
